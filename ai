from collections import deque

def waterJugBFS(x, y, z):
  visited = set()
  queue = deque([(0, 0)])

  while queue:
    jugA, jugB = queue.popleft()
    print(jugA,jugB)
    if jugA==z or jugB==z or jugA+jugB==z:
      return True
    if (jugA, jugB) in visited:
      continue
    visited.add((jugA, jugB))
    if jugA < x:
      #fill jug a
      queue.append((x, jugB))
    if jugB < y:
      #fill jug b
      queue.append((jugA, y))
    if jugA > 0:
      #empty jug a
      queue.append((0, jugB))
    if jugB > 0:
      #empty jug b
      queue.append((jugA, 0))
    if jugA+jugB >= y:
      queue.append((jugA-(y-jugB), y))
    else:
      queue.append((0, jugA+jugB))
    if jugA+jugB >= x:
      #from b to a
      queue.append((x, jugB-(x-jugA)))
    else:
      queue.append((jugA+jugB, 0))
  return False

x = int(input('water capacity in first jug: '))
y = int(input('water capacity in second jug: '))
z = int(input('num of liters of water to be measured: '))

if waterJugBFS(x, y, z):
    print(f'{z} liters of water can be measured using {x}-liter and {y}-liter jugs')
else:
    print(f'{z} liters of water cannot be measured using {x}-liter and {y}-liter jugs')



from collections import deque

def is_valid(state):
    m1, c1, b1, m2, c2, b2 = state
    if m1 < 0 or c1 < 0 or m2 < 0 or c2 < 0:
        return False
    if (m1 != 0 and m1 < c1) or (m2 != 0 and m2 < c2):
        return False
    return True

def get_next_states(state):
    m1, c1, b1, m2, c2, b2 = state
    next_states = []
    if b1 == 0:
        for i in range(3):
            for j in range(3):
                if 0 < i + j <= 2:
                    next_state = (m1 - i, c1 - j, 1, m2 + i, c2 + j, 0)
                    if is_valid(next_state):
                        next_states.append(next_state)
    else:
        for i in range(3):
            for j in range(3):
                if 0 < i + j <= 2:
                    next_state = (m1 + i, c1 + j, 0, m2 - i, c2 - j, 1)
                    if is_valid(next_state):
                        next_states.append(next_state)
    return next_states

def bfs():
    initial_state = (3, 3, 0, 0, 0, 1)
    visited = set()
    queue = deque([initial_state])

    while queue:
        current_state = queue.popleft()
        if current_state[0:3] == (0, 0, 0):
            return current_state

        visited.add(current_state)
        for next_state in get_next_states(current_state):
            if next_state not in visited:
                queue.append(next_state)

solution = bfs()
print("Solution found:")
print("Missionaries and Cannibals:", solution)



from collections import deque

def is_valid(farmer, goat, wolf, cabbage):
    if (goat == cabbage) and (goat != farmer):
        return False
    if (goat == wolf) and (goat != farmer):
        return False
    return True

def bfs():
    visited = set()
    queue = deque([(0, 0, 0, 0)]) 
    while queue:
        current_state = queue.popleft()
        farmer, goat, wolf, cabbage = current_state
        if farmer == 1 and goat == 1 and wolf == 1 and cabbage == 1:
            return current_state

        visited.add(current_state)
        for action in [(1, 0, 0, 0), (-1, 0, 0, 0), (1, 1, 0, 0), (-1, -1, 0, 0), (1, 0, 1, 0), (-1, 0, -1, 0), (1, 0, 0, 1), (-1, 0, 0, -1)]:
            new_state = (farmer + action[0], goat + action[1], wolf + action[2], cabbage + action[3])
            if is_valid(*new_state) and new_state not in visited:
                queue.append(new_state)

solution = bfs()
print("Solution found:")
print("Farmer, Goat, Wolf, Cabbage:", solution)





def hanoi_bfs(num_disks):
    initial_state = ([list(range(num_disks, 0, -1)), [], []])
    goal_state = ([[], [], list(range(num_disks, 0, -1))])
    queue = []
    queue.append((initial_state, []))  # (state, path)
    visited = set()
    while queue:
        current_state, current_path = queue.pop(0)
        if current_state == goal_state:
            return current_path

        if tuple(map(tuple, current_state)) in visited:
            continue

        visited.add(tuple(map(tuple, current_state)))

        for i in range(3):
            for j in range(3):
                if i != j and current_state[i]:
                    new_state = [current_state[x][:] for x in range(3)]
                    disk = new_state[i].pop()
                    new_state[j].append(disk)
                    queue.append((new_state, current_path + [(i, j)]))

    return None

def print_solution(solution):
    if solution:
        print("Solution path:")
        for move in solution:
            print(f"Move disk from peg {move[0]} to peg {move[1]}")
    else:
        print("No solution found")

num_disks_list = [3]
for num_disks in num_disks_list:
    print(f"\nTower of Hanoi with {num_disks} disks:")
    solution = hanoi_bfs(num_disks)
    print_solution(solution)




from collections import deque

def water_jug_bfs(jug1_capacity, jug2_capacity, jug3_capacity, target):
    visited = set()
    queue = deque([(0, 0, jug3_capacity)])  
    while queue:
        jug1, jug2, jug3 = queue.popleft()
        if jug1 == target or jug2 == target or jug3 == target:
            return True

        if (jug1, jug2, jug3) in visited:
            continue
        visited.add((jug1, jug2, jug3))

        queue.append(((jug1 + jug2) % jug1_capacity, min(jug1 + jug2, jug2_capacity), jug3))  
        queue.append((min(jug1 + jug3, jug1_capacity), jug2, (jug1 + jug3) % jug3_capacity))  
        queue.append((jug1, (jug2 + jug3) % jug2_capacity, min(jug2 + jug3, jug3_capacity)))  
        queue.append(((jug1 + jug2) % jug1_capacity, jug2, (jug1 + jug2 + jug3) % jug3_capacity))  

        queue.append((0, jug2, jug3))  
        queue.append((jug1, 0, jug3)) 
        queue.append((jug1, jug2, 0)) 
    return False

jug1_capacity = 8
jug2_capacity = 5
jug3_capacity = 3
target = 4

if water_jug_bfs(jug1_capacity, jug2_capacity, jug3_capacity, target):
    print(f'{target} liters of water can be measured using {jug1_capacity}-liter, {jug2_capacity}-liter, and {jug3_capacity}-liter jugs')
else:
    print(f'{target} liters of water cannot be measured using {jug1_capacity}-liter, {jug2_capacity}-liter, and {jug3_capacity}-liter jugs')
